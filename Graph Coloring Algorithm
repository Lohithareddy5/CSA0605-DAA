# Graph Coloring Algorithm

def is_safe(graph, v, color, c):
    for i in range(len(graph)):
        if graph[v][i] == 1 and color[i] == c:
            return False
    return True

def graph_coloring_util(graph, m, color, v):
    if v == len(graph):
        return True

    for c in range(1, m + 1):
        if is_safe(graph, v, color, c):
            color[v] = c
            if graph_coloring_util(graph, m, color, v + 1):
                return True
            color[v] = 0

    return False

def graph_coloring(graph, m):
    color = [0] * len(graph)
    if not graph_coloring_util(graph, m, color, 0):
        return None
    return color

# Adjacency matrix representation of the graph
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
graph = [[0 for _ in range(n)] for _ in range(n)]

for u, v in edges:
    graph[u][v] = 1
    graph[v][u] = 1

m = 3  # Number of colors
result = graph_coloring(graph, m)
print("Coloring of the graph:", result)
