class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            # Union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1

def kruskal_mst(edges, num_vertices):
    # Sort edges based on their weights
    edges.sort(key=lambda x: x[2])
    
    ds = DisjointSet(num_vertices)
    mst_edges = []
    total_cost = 0

    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):  # If they are in different sets
            ds.union(u, v)
            mst_edges.append((u, v, weight))
            total_cost += weight

    return mst_edges, total_cost

# Example graph represented as an edge list (u, v, weight)
edges = [
    (0, 1, 2),
    (0, 3, 6),
    (1, 2, 3),
    (1, 4, 5),
    (2, 4, 7),
    (3, 4, 9),
    (1, 3, 8)
]

num_vertices = 5
mst_edges, total_cost = kruskal_mst(edges, num_vertices)

print("Edges in the Minimum Spanning Tree:")
for edge in mst_edges:
    print(f"Edge: {edge[0]} - {edge[1]}, Cost: {edge[2]}")

print("Total cost of the Minimum Spanning Tree:", total_cost)
