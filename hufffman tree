class Node:
    def _init_(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

# Function to build the Huffman Tree
def build_huffman_tree(characters, frequencies):
    nodes = [Node(char, freq) for char, freq in zip(characters, frequencies)]
    
    while len(nodes) > 1:
        nodes = sorted(nodes, key=lambda x: x.freq)
        left = nodes[0]
        right = nodes[1]
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        nodes = nodes[2:] + [merged]
    
    return nodes[0]

# Function to generate the Huffman codes
def generate_codes(node, current_code="", codes={}):
    if node:
        if node.char is not None:
            codes[node.char] = current_code
        generate_codes(node.left, current_code + "0", codes)
        generate_codes(node.right, current_code + "1", codes)
    return codes

# Function to decode the encoded string
def decode_huffman(encoded_string, huffman_tree):
    decoded_message = ""
    current_node = huffman_tree
    for bit in encoded_string:
        current_node = current_node.left if bit == '0' else current_node.right
        if current_node.char is not None:
            decoded_message += current_node.char
            current_node = huffman_tree
    return decoded_message

# Test Case 1
n = 4
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
encoded_string = '1101100111110'

huffman_tree = build_huffman_tree(characters, frequencies)
decoded_output = decode_huffman(encoded_string, huffman_tree)
print(decoded_output)
8:30 AM







