def print_board(board):
    N = len(board)
    for row in board:
        print(" ".join(row))
    print("\n")

def solve_n_queens(N):
    def is_safe(board, row, col):
        # Check this column on upper side
        for i in range(row):
            if board[i][col] == 'Q':
                return False
        
        # Check upper diagonal on left side
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        # Check upper diagonal on right side
        for i, j in zip(range(row, -1, -1), range(col, N)):
            if board[i][j] == 'Q':
                return False
        
        return True

    def solve_util(board, row):
        if row >= N:
            print_board(board)
            return
        
        for col in range(N):
            if is_safe(board, row, col):
                board[row][col] = 'Q'  # Place queen
                solve_util(board, row + 1)  # Recur to place rest
                board[row][col] = '.'  # Backtrack

    board = [['.' for _ in range(N)] for _ in range(N)]
    solve_util(board, 0)

# Example usage
print("N = 4 solutions:")
solve_n_queens(4)

print("N = 5 solutions:")
solve_n_queens(5)

print("N = 8 solutions:")
solve_n_queens(8)
