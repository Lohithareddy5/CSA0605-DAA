def quick_sort(arr, low, high):
    if low < high:
        # Partition the array and get the pivot index
        pivot_index = partition(arr, low, high)
        
        # Display the array after partitioning
        print("After partitioning:", arr)
        
        # Recursively apply Quick Sort on the left and right sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    # Choose the middle element as the pivot
    mid = low + (high - low) // 2
    pivot = arr[mid]
    
    # Move pivot to the end for partitioning
    arr[mid], arr[high] = arr[high], arr[mid]
    pivot_index = low
    
    for i in range(low, high):
        if arr[i] < pivot:
            arr[i], arr[pivot_index] = arr[pivot_index], arr[i]
            pivot_index += 1
            
    # Move pivot back to its correct position
    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]
    
    return pivot_index

# Function to call Quick Sort and display the final sorted array
def sort_and_display(arr):
    print("Original array:", arr)
    quick_sort(arr, 0, len(arr) - 1)
    print("Sorted array:", arr)

# Test cases
print("\nTest Case 1:")
sort_and_display([19, 72, 35, 46, 58, 91, 22, 31])

print("\nTest Case 2:")
sort_and_display([31, 23, 35, 27, 11, 21, 15, 28])

print("\nTest Case 3:")
sort_and_display([22, 34, 25, 36, 43, 67, 52, 13, 65, 17])
