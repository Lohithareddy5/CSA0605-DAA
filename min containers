def min_containers(n, weights, max_capacity):
    # Sort the weights in ascending order
    weights.sort()
    
    containers = 0
    current_weight = 0
    
    for weight in weights:
        # If adding the weight exceeds the max capacity, we need a new container
        if current_weight + weight > max_capacity:
            containers += 1  # Use a new container
            current_weight = weight  # Start new container with the current weight
        else:
            current_weight += weight  # Add weight to the current container
    
    # If there's any weight in the current container, we need to count it
    if current_weight > 0:
        containers += 1
        
    return containers

# Test Case 1
n1 = 7
weights1 = [5, 10, 15, 20, 25, 30, 35]
max_capacity1 = 50
result1 = min_containers(n1, weights1, max_capacity1)
print(result1)  # Output: 4

# Test Case 2
n2 = 8
weights2 = [10, 20, 30, 40, 50, 60, 70, 80]
max_capacity2 = 100
result2 = min_containers(n2, weights2, max_capacity2)
print(result2)  # Output: 6
