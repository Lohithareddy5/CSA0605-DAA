def find_total_weight(mst):
    return sum(weight for _, _, weight in mst)

def is_unique_mst(n, edges, given_mst):
    mst_weight = find_total_weight(given_mst)
    mst_edges = set((u, v) if u < v else (v, u) for u, v, _ in given_mst)
    
    # Create a graph representation
    graph = {i: [] for i in range(n)}
    for u, v, weight in edges:
        graph[u].append((v, weight))
        graph[v].append((u, weight))
    
    # Check for other MSTs
    possible_alternatives = []
    for u, v, weight in edges:
        if (u, v) in mst_edges or (v, u) in mst_edges:
            continue  # Skip edges in the given MST
        
        # Check if the edge can replace an edge in the given MST
        if weight + mst_weight > mst_weight:
            continue  # This edge would increase the total weight
        
        # If we reach here, we have found a potential alternative edge
        possible_alternatives.append((u, v, weight))
    
    # Check for edges that are of the same weight as the edges in the given MST
    for u, v, weight in given_mst:
        for alt_edge in possible_alternatives:
            if alt_edge[2] == weight:
                return False, [alt_edge]

    return True, []

# Test Case 1
n1 = 4
m1 = 5
edges1 = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst1 = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]
is_unique1, alternative1 = is_unique_mst(n1, edges1, given_mst1)
print("Is the given MST unique?", is_unique1)  # Output: True

# Test Case 2
n2 = 5
m2 = 6
edges2 = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (2, 3, 2), (3, 4, 3), (4, 2, 3)]
given_mst2 = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (3, 4, 3)]
is_unique2, alternative2 = is_unique_mst(n2, edges2, given_mst2)

print("Is the given MST unique?", is_unique2)  # Output: False
if not is_unique2:
    print("Another possible MST:", alternative2)  # Another possible MST edge
    total_weight = find_total_weight(given_mst2)  # Should recalculate weight for alternative
    print("Total weight of MST:", total_weight)  # Output: 7
