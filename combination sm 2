def combination_sum_2(candidates, target):
    def backtrack(remaining, combination, start):
        if remaining == 0:  # Found a valid combination
            result.append(list(combination))
            return
        elif remaining < 0:  # Exceeded the target
            return
        
        for i in range(start, len(candidates)):
            # Skip duplicates
            if i > start and candidates[i] == candidates[i - 1]:
                continue
            
            # Include the current candidate
            combination.append(candidates[i])
            backtrack(remaining - candidates[i], combination, i + 1)  # Move to the next index
            combination.pop()  # Backtrack

    candidates.sort()  # Sort to handle duplicates
    result = []
    backtrack(target, [], 0)
    return result

# Example test cases
candidates1 = [10, 1, 2, 7, 6, 1, 5]
target1 = 8
print("Example 1 Output:", combination_sum_2(candidates1, target1))

candidates2 = [2, 5, 2, 1, 2]
target2 = 5
print("Example 2 Output:", combination_sum_2(candidates2, target2))
