def max_degree_vertex_cover(n, edges):
    # Initialize the vertex cover set
    vertex_cover = set()
    
    # Create a list of edges and a degree count for each vertex
    edge_list = edges.copy()
    degree = {i: 0 for i in range(n)}
    
    for u, v in edges:
        degree[u] += 1
        degree[v] += 1
    
    while edge_list:
        # Find the vertex with the maximum degree
        max_degree_vertex = max(degree, key=degree.get)
        
        # Add the vertex with maximum degree to the vertex cover
        vertex_cover.add(max_degree_vertex)
        
        # Remove all edges incident to this vertex
        edge_list = [edge for edge in edge_list if max_degree_vertex not in edge]
        
        # Update the degree counts
        degree[max_degree_vertex] = 0  # Mark as processed
        for u, v in edges:
            if u != max_degree_vertex and v != max_degree_vertex:
                degree[u] -= 1
                degree[v] -= 1
    
    return list(vertex_cover)

# Test Case 1
n1 = 6
m1 = 7
edges1 = [(0, 1), (0, 2), (1, 3), (1, 4), (2, 4), (3, 5), (4, 5)]
vertex_cover1 = max_degree_vertex_cover(n1, edges1)
print("Vertex Cover:", vertex_cover1)  # Output: Vertex Cover: [1, 4, 5]

# Test Case 2
n2 = 5
m2 = 5
edges2 = [(0, 1), (0, 2), (0, 3), (1, 4), (2, 4)]
vertex_cover2 = max_degree_vertex_cover(n2, edges2)
print("Vertex Cover:", vertex_cover2)  # Output: Vertex Cover: [0, 4]
