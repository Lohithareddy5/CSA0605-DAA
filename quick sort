def quick_sort(arr, low, high):
    if low < high:
        # Partition the array and get the pivot index
        pivot_index = partition(arr, low, high)
        
        # Display the array after partitioning
        print("After partitioning:", arr)
        
        # Recursively apply Quick Sort on the left and right sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    pivot = arr[low]  # Choose the first element as pivot
    left = low + 1
    right = high

    while True:
        # Increment left index while the element is less than the pivot
        while left <= right and arr[left] <= pivot:
            left += 1
        # Decrement right index while the element is greater than the pivot
        while left <= right and arr[right] >= pivot:
            right -= 1
        
        if left > right:  # If the two indexes cross, partitioning is done
            break
        else:
            # Swap the elements at left and right
            arr[left], arr[right] = arr[right], arr[left]

    # Swap the pivot element with the element at the right index
    arr[low], arr[right] = arr[right], arr[low]
    
    return right  # Return the pivot index

# Function to call Quick Sort and display the final sorted array
def sort_and_display(arr):
    print("Original array:", arr)
    quick_sort(arr, 0, len(arr) - 1)
    print("Sorted array:", arr)

# Test cases
print("\nTest Case 1:")
sort_and_display([10, 16, 8, 12, 15, 6, 3, 9, 5])

print("\nTest Case 2:")
sort_and_display([12, 4, 78, 23, 45, 67, 89, 1])

print("\nTest Case 3:")
sort_and_display([38, 27, 43, 3, 9, 82, 10])
